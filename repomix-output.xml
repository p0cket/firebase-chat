This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.firebase/
  hosting.cHVibGlj.cache
  hosting.ZGlzdA.cache
public/
  index.html
  vite.svg
src/
  assets/
    react.svg
  components/
    Auth.tsx
    ChatMessage.tsx
    ChatRoom.tsx
    Home.tsx
    SignIn.tsx
    SignOut.tsx
    SignUp.tsx
  firebase/
    config.ts
  App.css
  App.tsx
  index.css
  main.tsx
  types.ts
  vite-env.d.ts
.env.example
.firebaserc
.gitignore
eslint.config.js
firebase.json
index.html
package.json
README.md
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/components/Home.tsx">
import { useState, useEffect } from "react"
import { useNavigate } from "react-router-dom"
import { collection, addDoc, getDocs, query, where, serverTimestamp, doc, setDoc, orderBy } from "firebase/firestore"
import { db, auth } from "../firebase/config"

interface Room {
  id: string
  name: string
  createdAt: any
  createdBy: string
}

export const Home = () => {
  const [joinRoomCode, setJoinRoomCode] = useState("")
  const [createRoomName, setCreateRoomName] = useState("")
  const [userRooms, setUserRooms] = useState<Room[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState("")
  const navigate = useNavigate()

  useEffect(() => {
    const fetchUserRooms = async () => {
      if (!auth.currentUser) return

      try {
        // Query for rooms where the user is a member
        const roomsRef = collection(db, "rooms")
        const q = query(
          roomsRef, 
          where("members", "array-contains", auth.currentUser.uid),
          orderBy("createdAt", "desc")
        )
        const querySnapshot = await getDocs(q)
        
        const rooms: Room[] = []
        querySnapshot.forEach((doc) => {
          rooms.push({ id: doc.id, ...doc.data() } as Room)
        })
        
        setUserRooms(rooms)
      } catch (error) {
        console.error("Error fetching user rooms:", error)
      } finally {
        setLoading(false)
      }
    }

    fetchUserRooms()
  }, [])

  const handleCreateRoom = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!auth.currentUser) {
      setError("You must be logged in to create a room")
      return
    }
    
    if (!createRoomName.trim()) {
      setError("Room name is required")
      return
    }
    
    try {
      // Generate a random 6-character room code
      const generateRoomId = () => {
        const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789'
        let roomId = ''
        for (let i = 0; i < 6; i++) {
          roomId += chars.charAt(Math.floor(Math.random() * chars.length))
        }
        return roomId
      }
      
      const roomId = generateRoomId()
      
      // Create room document
      await setDoc(doc(db, "rooms", roomId), {
        id: roomId,
        name: createRoomName.trim(),
        createdBy: auth.currentUser.uid,
        createdAt: serverTimestamp(),
        members: [auth.currentUser.uid]
      })
      
      // Navigate to the new room
      navigate(`/room/${roomId}`)
    } catch (error) {
      console.error("Error creating room:", error)
      setError("Failed to create room")
    }
  }

  const handleJoinRoom = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!joinRoomCode.trim()) {
      setError("Room code is required")
      return
    }
    
    try {
      // Check if room exists
      const roomRef = doc(db, "rooms", joinRoomCode.trim())
      const roomDoc = await getDocs(query(collection(db, "rooms"), where("id", "==", joinRoomCode.trim())))
      
      if (roomDoc.empty) {
        setError("Room not found")
        return
      }
      
      // Add user to room members if not already a member
      const roomData = roomDoc.docs[0].data()
      const roomId = roomDoc.docs[0].id
      
      if (!roomData.members.includes(auth.currentUser?.uid)) {
        await setDoc(doc(db, "rooms", roomId), {
          ...roomData,
          members: [...roomData.members, auth.currentUser?.uid]
        }, { merge: true })
      }
      
      // Navigate to the room
      navigate(`/room/${roomId}`)
    } catch (error) {
      console.error("Error joining room:", error)
      setError("Failed to join room")
    }
  }

  return (
    <div className="max-w-2xl mx-auto py-8">
      <h1 className="text-2xl font-bold mb-6 text-center dark:text-white">Welcome to Firebase Chat</h1>
      
      {error && (
        <div className="mb-6 p-3 bg-red-100 border border-red-400 text-red-700 rounded">
          {error}
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Create Room Form */}
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4 dark:text-white">Create a Room</h2>
          <form onSubmit={handleCreateRoom}>
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Room Name
              </label>
              <input
                type="text"
                value={createRoomName}
                onChange={(e) => setCreateRoomName(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                placeholder="Enter room name"
              />
            </div>
            <button
              type="submit"
              className="w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 transition-colors"
            >
              Create Room
            </button>
          </form>
        </div>

        {/* Join Room Form */}
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4 dark:text-white">Join a Room</h2>
          <form onSubmit={handleJoinRoom}>
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Room Code
              </label>
              <input
                type="text"
                value={joinRoomCode}
                onChange={(e) => setJoinRoomCode(e.target.value.toUpperCase())}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                placeholder="Enter 6-digit room code"
              />
            </div>
            <button
              type="submit"
              className="w-full bg-green-500 text-white py-2 px-4 rounded-md hover:bg-green-600 transition-colors"
            >
              Join Room
            </button>
          </form>
        </div>
      </div>

      {/* User's Rooms */}
      <div className="mt-8 bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
        <h2 className="text-xl font-semibold mb-4 dark:text-white">Your Rooms</h2>
        
        {loading ? (
          <div className="text-center py-4">
            <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500 mx-auto"></div>
            <p className="mt-2 text-gray-600 dark:text-gray-400">Loading your rooms...</p>
          </div>
        ) : userRooms.length > 0 ? (
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            {userRooms.map((room) => (
              <div 
                key={room.id}
                onClick={() => navigate(`/room/${room.id}`)}
                className="p-4 border border-gray-200 dark:border-gray-700 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
              >
                <h3 className="font-medium dark:text-white">{room.name}</h3>
                <p className="text-sm text-gray-500 dark:text-gray-400">Room Code: {room.id}</p>
              </div>
            ))}
          </div>
        ) : (
          <p className="text-gray-600 dark:text-gray-400 text-center py-4">
            You haven't joined any rooms yet. Create or join a room to get started.
          </p>
        )}
      </div>
    </div>
  )
}
</file>

<file path=".firebase/hosting.cHVibGlj.cache">
vite.svg,1742872729860,d3bbbc44b3ea71906a72bf2ec1a4716903e2e3d9f85a5007205a65d1f12e2923
index.html,1743095275781,1ffc04fd3bb451ba015c88721c7d48f2d2efc48bdf3cbf5fe73a720fe636f940
</file>

<file path=".firebase/hosting.ZGlzdA.cache">
vite.svg,1743096065183,d3bbbc44b3ea71906a72bf2ec1a4716903e2e3d9f85a5007205a65d1f12e2923
assets/index-fFKRMnh_.css,1743096065324,626c567be4a84d140ad297f1e91af7c2e76f8764feeab8400e1dfd6efa1dde7d
index.html,1743096065324,aa052afc29f17c02edcb2cb15a9ac6d8160db6468b456b8b54833c710074c350
assets/index-DtZwYrS1.js,1743096065324,85ba4602ff9a728d27e777a60f3c35f51f85d41c9641b975755f60f59b27c19f
</file>

<file path="public/index.html">
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Welcome to Firebase Hosting</title>

    <!-- update the version number as needed -->
    <script defer src="/__/firebase/11.5.0/firebase-app-compat.js"></script>
    <!-- include only the Firebase features as you need -->
    <script defer src="/__/firebase/11.5.0/firebase-auth-compat.js"></script>
    <script defer src="/__/firebase/11.5.0/firebase-database-compat.js"></script>
    <script defer src="/__/firebase/11.5.0/firebase-firestore-compat.js"></script>
    <script defer src="/__/firebase/11.5.0/firebase-functions-compat.js"></script>
    <script defer src="/__/firebase/11.5.0/firebase-messaging-compat.js"></script>
    <script defer src="/__/firebase/11.5.0/firebase-storage-compat.js"></script>
    <script defer src="/__/firebase/11.5.0/firebase-analytics-compat.js"></script>
    <script defer src="/__/firebase/11.5.0/firebase-remote-config-compat.js"></script>
    <script defer src="/__/firebase/11.5.0/firebase-performance-compat.js"></script>
    <!-- 
      initialize the SDK after all desired features are loaded, set useEmulator to false
      to avoid connecting the SDK to running emulators.
    -->
    <script defer src="/__/firebase/init.js?useEmulator=true"></script>

    <style media="screen">
      body { background: #ECEFF1; color: rgba(0,0,0,0.87); font-family: Roboto, Helvetica, Arial, sans-serif; margin: 0; padding: 0; }
      #message { background: white; max-width: 360px; margin: 100px auto 16px; padding: 32px 24px; border-radius: 3px; }
      #message h2 { color: #ffa100; font-weight: bold; font-size: 16px; margin: 0 0 8px; }
      #message h1 { font-size: 22px; font-weight: 300; color: rgba(0,0,0,0.6); margin: 0 0 16px;}
      #message p { line-height: 140%; margin: 16px 0 24px; font-size: 14px; }
      #message a { display: block; text-align: center; background: #039be5; text-transform: uppercase; text-decoration: none; color: white; padding: 16px; border-radius: 4px; }
      #message, #message a { box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24); }
      #load { color: rgba(0,0,0,0.4); text-align: center; font-size: 13px; }
      @media (max-width: 600px) {
        body, #message { margin-top: 0; background: white; box-shadow: none; }
        body { border-top: 16px solid #ffa100; }
      }
    </style>
  </head>
  <body>
    <div id="message">
      <h2>Welcome</h2>
      <h1>Firebase Hosting Setup Complete</h1>
      <p>You're seeing this because you've successfully setup Firebase Hosting. Now it's time to go build something extraordinary!</p>
      <a target="_blank" href="https://firebase.google.com/docs/hosting/">Open Hosting Documentation</a>
    </div>
    <p id="load">Firebase SDK Loading&hellip;</p>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const loadEl = document.querySelector('#load');
        // // 🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥
        // // The Firebase SDK is initialized and available here!
        //
        // firebase.auth().onAuthStateChanged(user => { });
        // firebase.database().ref('/path/to/ref').on('value', snapshot => { });
        // firebase.firestore().doc('/foo/bar').get().then(() => { });
        // firebase.functions().httpsCallable('yourFunction')().then(() => { });
        // firebase.messaging().requestPermission().then(() => { });
        // firebase.storage().ref('/path/to/ref').getDownloadURL().then(() => { });
        // firebase.analytics(); // call to activate
        // firebase.analytics().logEvent('tutorial_completed');
        // firebase.performance(); // call to activate
        //
        // // 🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥

        try {
          let app = firebase.app();
          let features = [
            'auth', 
            'database', 
            'firestore',
            'functions',
            'messaging', 
            'storage', 
            'analytics', 
            'remoteConfig',
            'performance',
          ].filter(feature => typeof app[feature] === 'function');
          loadEl.textContent = `Firebase SDK loaded with ${features.join(', ')}`;
        } catch (e) {
          console.error(e);
          loadEl.textContent = 'Error loading the Firebase SDK, check the console.';
        }
      });
    </script>
  </body>
</html>
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/components/SignUp.tsx">
import { useState } from 'react';
import { createUserWithEmailAndPassword, updateProfile } from 'firebase/auth';
import { auth } from '../firebase/config';

interface SignUpProps {
  darkMode: boolean;
  onSwitch: () => void;
}

export const SignUp = ({ darkMode, onSwitch }: SignUpProps) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [displayName, setDisplayName] = useState('');
  const [error, setError] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    
    try {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      await updateProfile(userCredential.user, { displayName });
    } catch (err: any) {
      setError(err.message);
    }
  };

  return (
    <>
      <h2 className={`text-2xl font-bold text-center mb-6 ${darkMode ? 'text-white' : 'text-gray-800'}`}>
        Create an Account
      </h2>
      
      {error && (
        <div className={`mb-4 p-3 rounded ${darkMode ? 'bg-red-900 border-red-700 text-red-200' : 'bg-red-100 border border-red-400 text-red-700'}`}>
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className={`block text-sm font-medium mb-1 ${darkMode ? 'text-gray-300' : 'text-gray-700'}`} htmlFor="displayName">
            Display Name
          </label>
          <input
            id="displayName"
            type="text"
            value={displayName}
            onChange={(e) => setDisplayName(e.target.value)}
            required
            className={`w-full px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300 text-gray-900'}`}
          />
        </div>
        
        <div>
          <label className={`block text-sm font-medium mb-1 ${darkMode ? 'text-gray-300' : 'text-gray-700'}`} htmlFor="email">
            Email
          </label>
          <input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            className={`w-full px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300 text-gray-900'}`}
          />
        </div>
        
        <div>
          <label className={`block text-sm font-medium mb-1 ${darkMode ? 'text-gray-300' : 'text-gray-700'}`} htmlFor="password">
            Password
          </label>
          <input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            className={`w-full px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300 text-gray-900'}`}
          />
        </div>
        
        <button 
          type="submit"
          className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors"
        >
          Register
        </button>
      </form>
      
      <p className={`mt-4 text-center text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
        Already have an account?
        <button 
          onClick={onSwitch}
          className={`ml-1 font-medium focus:outline-none ${darkMode ? 'text-blue-400 hover:text-blue-300' : 'text-blue-600 hover:text-blue-800'}`}
        >
          Login
        </button>
      </p>
    </>
  );
};
</file>

<file path="src/firebase/config.ts">
import { initializeApp } from 'firebase/app';
import { getFirestore } from 'firebase/firestore';
import { getAuth } from 'firebase/auth';

const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID,
  measurementId: import.meta.env.VITE_FIREBASE_MEASUREMENT_ID,
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
export const db = getFirestore(app);
export const auth = getAuth(app);
</file>

<file path="src/App.css">
@import "tailwindcss";
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>

<file path="src/index.css">
:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}
</file>

<file path="src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="src/types.ts">
export type ChatMessageType = {
  message: {
    id?: string
    text: string
    uid: string
    photoURL?: string
    displayName?: string // Add displayName to message interface
  }
}
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />

interface ImportMetaEnv {
  readonly VITE_FIREBASE_API_KEY: string;
  readonly VITE_FIREBASE_AUTH_DOMAIN: string;
  readonly VITE_FIREBASE_PROJECT_ID: string;
  readonly VITE_FIREBASE_STORAGE_BUCKET: string;
  readonly VITE_FIREBASE_MESSAGING_SENDER_ID: string;
  readonly VITE_FIREBASE_APP_ID: string;
  readonly VITE_FIREBASE_MEASUREMENT_ID: string;
}

interface ImportMeta {
  readonly env: ImportMetaEnv;
}
</file>

<file path=".env.example">
VITE_FIREBASE_API_KEY=your-api-key
VITE_FIREBASE_AUTH_DOMAIN=your-project-id.firebaseapp.com
VITE_FIREBASE_PROJECT_ID=your-project-id
VITE_FIREBASE_STORAGE_BUCKET=your-project-id.appspot.com
VITE_FIREBASE_MESSAGING_SENDER_ID=your-messaging-sender-id
VITE_FIREBASE_APP_ID=your-app-id
VITE_FIREBASE_MEASUREMENT_ID=your-measurement-id
</file>

<file path=".firebaserc">
{
  "projects": {
    "default": "turing-test-chat"
  }
}
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="firebase.json">
{
  "hosting": {
    "public": "dist",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ]
  }
}
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "firebase-chat",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@tailwindcss/vite": "^4.0.17",
    "firebase": "^11.5.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-firebase-hooks": "^5.1.1",
    "tailwindcss": "^4.0.17"
  },
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^15.15.0",
    "typescript": "~5.7.2",
    "typescript-eslint": "^8.24.1",
    "vite": "^6.2.0"
  }
}
</file>

<file path="README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
})
</file>

<file path="src/components/Auth.tsx">
import { useState, useEffect } from 'react';
import { SignUp } from './SignUp';
import { SignIn } from './SignIn';

export const Auth = () => {
  const [isRegistering, setIsRegistering] = useState(false);
  const [darkMode, setDarkMode] = useState(true); // Default to dark mode

  // Check system preference on mount
  useEffect(() => {
    const isDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
    setDarkMode(isDarkMode);
  }, []);

  const toggleDarkMode = () => {
    setDarkMode(!darkMode);
  };

  const toggleRegistration = () => {
    setIsRegistering(!isRegistering);
  };

  return (
    <div className={`flex flex-col items-center justify-center min-h-screen px-4 ${darkMode ? 'bg-gray-900' : 'bg-gray-100'}`}>
      <div className={`w-full max-w-md rounded-lg shadow-md p-8 ${darkMode ? 'bg-gray-800' : 'bg-white'}`}>
        <div className="flex justify-end mb-4">
          <button 
            onClick={toggleDarkMode} 
            className={`p-2 rounded-full ${darkMode ? 'bg-gray-700 text-yellow-300' : 'bg-gray-200 text-gray-700'}`}
          >
            {darkMode ? '☀️' : '🌙'}
          </button>
        </div>
        
        {isRegistering ? (
          <SignUp darkMode={darkMode} onSwitch={toggleRegistration} />
        ) : (
          <SignIn darkMode={darkMode} onSwitch={toggleRegistration} />
        )}
      </div>
    </div>
  );
};
</file>

<file path="src/components/ChatMessage.tsx">
import { getAuth } from "firebase/auth"
import { ChatMessageType } from "../types"

function ChatMessage(props: ChatMessageType) {
  const auth = getAuth()
  const { text, uid, photoURL, displayName } = props.message

  const messageClass = uid === auth.currentUser?.uid ? "sent" : "received"

  // Function to generate avatar based on photoURL or initials
  const getAvatar = () => {
    if (photoURL) {
      return <img src={photoURL} alt="User avatar" className="h-10 w-10 rounded-full object-cover" />
    } else if (displayName) {
      const initials = displayName
        .split(" ")
        .map((name) => name[0])
        .join("")
        .toUpperCase()
      const dicebearUrl = `https://api.dicebear.com/7.x/initials/svg?seed=${encodeURIComponent(
        initials
      )}`
      return <img src={dicebearUrl} alt={`${initials} avatar`} className="h-10 w-10 rounded-full" />
    } else {
      const randomAvatarUrl = "https://api.dicebear.com/7.x/avataaars/svg"
      return <img src={randomAvatarUrl} alt="Random user avatar" className="h-10 w-10 rounded-full" />
    }
  }

  return (
    <div className={`flex items-start gap-2 my-2 ${messageClass === "sent" ? "flex-row-reverse ml-auto" : ""}`}>
      <div className="flex-shrink-0">
        {getAvatar()}
      </div>
      <div className={`flex flex-col max-w-[70%] ${messageClass === "sent" ? "items-end" : "items-start"}`}>
        {displayName && <span className="text-xs text-gray-500">{displayName}</span>}
        <div className={`px-4 py-1 rounded-lg ${
          messageClass === "sent" 
            ? "bg-blue-500 text-white rounded-tr-none" 
            : "bg-gray-200 text-gray-800 rounded-tl-none"
        }`}>
          <p className="text-sm break-words">{text}</p>
        </div>
      </div>
    </div>
  )
}

export default ChatMessage
</file>

<file path="src/components/SignOut.tsx">
import { getAuth, signOut } from "firebase/auth";

function SignOut() {
  const auth = getAuth();
  
  return auth.currentUser && (
    <button className="sign-out" onClick={() => signOut(auth)}>
      Sign Out
    </button>
  );
}

export default SignOut;
</file>

<file path="src/App.tsx">
import { useState, useEffect } from "react"
import { onAuthStateChanged, User } from "firebase/auth"
import { auth } from "./firebase/config"
import { ChatRoom } from "./components/ChatRoom"
import { Auth } from "./components/Auth"
import "./App.css"

function App() {
  const [user, setUser] = useState<User | null>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
      setUser(currentUser)
      setLoading(false)
    })

    return unsubscribe
  }, [])

  if (loading) {
    return <div>Loading...</div>
  }

  return (
    <div>
      <header className="p-4 border-b dark:border-gray-700 bg-white dark:bg-gray-800 shadow-sm">
        <div className="container mx-auto flex justify-between items-center">
          {/* <h1 className="text-xl font-bold text-gray-800 dark:text-white">
            Firebase Chat
          </h1> */}
          {user && (
            <div className="user-info flex items-center">
              <span className="text-sm font-medium text-gray-700 dark:text-gray-300 mr-4">
                {user.displayName || user.email}
              </span>
              <button
                onClick={() => auth.signOut()}
                className="px-3 py-1 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-white rounded hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
              >
                Logout
              </button>
            </div>
          )}
        </div>
      </header>

      <main>{user ? <ChatRoom /> : <Auth />}</main>
    </div>
  )
}

export default App
</file>

<file path="src/components/ChatRoom.tsx">
import { useState, useEffect, useRef } from "react"
import {
  collection,
  addDoc,
  serverTimestamp,
  onSnapshot,
  query,
  orderBy,
} from "firebase/firestore"
import { db, auth } from "../firebase/config"

interface Message {
  id: string
  text: string
  uid: string
  displayName: string
  createdAt: any
}

// Dummy user constants
const DUMMY_USER_ID = "dummy-user-123"
const DUMMY_USER_NAME = "Test User"

export const ChatRoom = () => {
  const [messages, setMessages] = useState<Message[]>([])
  const [newMessage, setNewMessage] = useState("")
  const [showDummyUser, setShowDummyUser] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    // Query to get messages ordered by timestamp
    const messagesQuery = query(
      collection(db, "messages"),
      orderBy("createdAt")
    )

    // Subscribe to real-time updates
    const unsubscribe = onSnapshot(messagesQuery, (snapshot) => {
      const messageData: Message[] = []
      snapshot.forEach((doc) => {
        messageData.push({ id: doc.id, ...doc.data() } as Message)
      })
      setMessages(messageData)
    })

    // Cleanup subscription
    return unsubscribe
  }, [])

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const sendMessage = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!newMessage.trim() || !auth.currentUser) return

    // Store the message text before clearing the input
    const messageText = newMessage.trim()

    try {
      await addDoc(collection(db, "messages"), {
        text: messageText,
        createdAt: serverTimestamp(),
        uid: auth.currentUser.uid,
        displayName: auth.currentUser.displayName || "Anonymous",
      })
      setNewMessage("")

      // If dummy user is enabled, send a response after a short delay
      if (showDummyUser) {
        setTimeout(() => sendDummyMessage(messageText), 1000)
      }
    } catch (error) {
      console.error("Error sending message:", error)
    }
  }

  const sendDummyMessage = async (originalMessage: string) => {
    try {
      await addDoc(collection(db, "messages"), {
        text: `This is a response from the dummy user to: "${originalMessage}"`,
        createdAt: serverTimestamp(),
        uid: DUMMY_USER_ID,
        displayName: DUMMY_USER_NAME,
      })
    } catch (error) {
      console.error("Error sending dummy message:", error)
    }
  }

  return (
    <div className="flex flex-col h-[calc(100vh-9rem)] max-w-2xl mx-auto p-4 bg-gray-50 dark:bg-gray-900 dark:text-gray-200">
      <div className="flex justify-between items-center mb-2">
        <h2 className="text-lg font-semibold">Chat Room</h2>
        {/* <div className="flex items-center">
          <span className="mr-2 text-sm">Test Mode:</span>
          <button
            onClick={() => setShowDummyUser(!showDummyUser)}
            className={`px-3 py-1 rounded-md text-sm ${
              showDummyUser
                ? "bg-green-500 text-white"
                : "bg-gray-300 text-gray-700 dark:bg-gray-700 dark:text-gray-300"
            }`}
          >
            {showDummyUser ? "On" : "Off"}
          </button>
        </div> */}
      </div>

      <div className="flex-1 overflow-y-auto mb-4 p-3 flex flex-col scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-700">
        {messages.map((msg) => (
          <div
            key={msg.id}
            className={`flex ${
              msg.uid === auth.currentUser?.uid
                ? "justify-end"
                : "justify-start"
            } my-2`}
          >
            <div
              className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                msg.uid === auth.currentUser?.uid
                  ? "bg-blue-500 text-white rounded-br-none dark:bg-blue-600"
                  : "bg-gray-200 text-gray-800 rounded-bl-none dark:bg-gray-700 dark:text-gray-200"
              }`}
            >
              <div
                className={`text-xs mb-1 font-medium ${
                  msg.uid === auth.currentUser?.uid
                    ? "text-blue-100"
                    : "text-gray-500 dark:text-gray-400"
                }`}
              >
                {msg.displayName} {msg.uid === DUMMY_USER_ID && "(Test User)"}
              </div>
              <div className="break-words">{msg.text}</div>
            </div>
          </div>
        ))}
        <div ref={messagesEndRef} />
      </div>

      <form
        onSubmit={sendMessage}
        className="flex space-x-2 border-t border-gray-200 dark:border-gray-700 pt-4"
      >
        <div className="flex-1 relative">
          <input
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value.slice(0, 500))}
            placeholder="Type a message"
            maxLength={500}
            className="w-full px-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-200 dark:placeholder-gray-400"
          />
          {newMessage.length > 0 && (
            <span className="absolute right-3 bottom-2 text-xs text-gray-500 dark:text-gray-400">
              {newMessage.length}/256
            </span>
          )}
        </div>
        <button
          type="submit"
          className="bg-blue-500 text-white px-4 py-2 rounded-full hover:bg-blue-600 transition dark:bg-blue-600 dark:hover:bg-blue-700"
        >
          Send
        </button>
      </form>
    </div>
  )
}

// //
// import { useState, useEffect, useRef } from "react"
// import {
//   collection,
//   addDoc,
//   serverTimestamp,
//   onSnapshot,
//   query,
//   orderBy,
//   where,
// } from "firebase/firestore"
// import { db, auth } from "../firebase/config"

// interface Message {
//   id: string
//   text: string
//   uid: string
//   displayName: string
//   roomId: string
//   createdAt: any
// }

// interface Room {
//   id: string
//   name: string
// }

// // Dummy user constants
// const DUMMY_USER_ID = "dummy-user-123"
// const DUMMY_USER_NAME = "Test User"

// // Default rooms
// const DEFAULT_ROOMS: Room[] = [
//   { id: "general", name: "General" },
//   { id: "random", name: "Random" },
//   { id: "tech", name: "Technology" },
// ]

// export const ChatRoom = () => {
//   const [messages, setMessages] = useState<Message[]>([])
//   const [newMessage, setNewMessage] = useState("")
//   const [showDummyUser, setShowDummyUser] = useState(false)
//   const [currentRoom, setCurrentRoom] = useState<Room>(DEFAULT_ROOMS[0])
//   const [rooms, setRooms] = useState<Room[]>(DEFAULT_ROOMS)
//   const [newRoomName, setNewRoomName] = useState("")
//   const [showNewRoomInput, setShowNewRoomInput] = useState(false)
//   const messagesEndRef = useRef<HTMLDivElement>(null)

//   const scrollToBottom = () => {
//     messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
//   }

//   useEffect(() => {
//     // Query to get messages ordered by timestamp for the current room
//     const messagesQuery = query(
//       collection(db, "messages"),
//       where("roomId", "==", currentRoom.id),
//       orderBy("createdAt")
//     )

//     // Subscribe to real-time updates
//     const unsubscribe = onSnapshot(messagesQuery, (snapshot) => {
//       const messageData: Message[] = []
//       snapshot.forEach((doc) => {
//         messageData.push({ id: doc.id, ...doc.data() } as Message)
//       })
//       setMessages(messageData)
//     })

//     // Cleanup subscription
//     return unsubscribe
//   }, [currentRoom.id])

//   useEffect(() => {
//     scrollToBottom()
//   }, [messages])

//   const sendMessage = async (e: React.FormEvent) => {
//     e.preventDefault()

//     if (!newMessage.trim() || !auth.currentUser) return

//     // Store the message text before clearing the input
//     const messageText = newMessage.trim();

//     try {
//       await addDoc(collection(db, "messages"), {
//         text: messageText,
//         createdAt: serverTimestamp(),
//         uid: auth.currentUser.uid,
//         displayName: auth.currentUser.displayName || "Anonymous",
//         roomId: currentRoom.id,
//       })
//       setNewMessage("")

//       // If dummy user is enabled, send a response after a short delay
//       if (showDummyUser) {
//         setTimeout(() => sendDummyMessage(messageText), 1000)
//       }
//     } catch (error) {
//       console.error("Error sending message:", error)
//     }
//   }

//   const sendDummyMessage = async (originalMessage: string) => {
//     try {
//       await addDoc(collection(db, "messages"), {
//         text: `This is a response from the dummy user to: "${originalMessage}"`,
//         createdAt: serverTimestamp(),
//         uid: DUMMY_USER_ID,
//         displayName: DUMMY_USER_NAME,
//         roomId: currentRoom.id,
//       })
//     } catch (error) {
//       console.error("Error sending dummy message:", error)
//     }
//   }

//   const createNewRoom = () => {
//     if (!newRoomName.trim()) return;

//     const roomId = newRoomName.toLowerCase().replace(/\s+/g, '-');
//     const newRoom = { id: roomId, name: newRoomName.trim() };

//     setRooms([...rooms, newRoom]);
//     setCurrentRoom(newRoom);
//     setNewRoomName("");
//     setShowNewRoomInput(false);
//   }

//   return (
//     <div className="flex flex-col h-[calc(100vh-9rem)] max-w-2xl mx-auto p-4 bg-gray-50 dark:bg-gray-900 dark:text-gray-200">
//       <div className="flex justify-between items-center mb-2">
//         <h2 className="text-lg font-semibold">Chat Room: {currentRoom.name}</h2>
//         <div className="flex items-center">
//           <span className="mr-2 text-sm">Test Mode:</span>
//           <button
//             onClick={() => setShowDummyUser(!showDummyUser)}
//             className={`px-3 py-1 rounded-md text-sm ${
//               showDummyUser
//                 ? "bg-green-500 text-white"
//                 : "bg-gray-300 text-gray-700 dark:bg-gray-700 dark:text-gray-300"
//             }`}
//           >
//             {showDummyUser ? "On" : "Off"}
//           </button>
//         </div>
//       </div>

//       {/* Room selector */}
//       <div className="mb-4 flex flex-wrap items-center space-x-2">
//         {rooms.map((room) => (
//           <button
//             key={room.id}
//             onClick={() => setCurrentRoom(room)}
//             className={`px-3 py-1 mb-2 rounded-md text-sm ${
//               currentRoom.id === room.id
//                 ? "bg-blue-500 text-white"
//                 : "bg-gray-200 text-gray-800 dark:bg-gray-700 dark:text-gray-300"
//             }`}
//           >
//             {room.name}
//           </button>
//         ))}

//         {showNewRoomInput ? (
//           <div className="flex items-center space-x-2 mb-2">
//             <input
//               type="text"
//               value={newRoomName}
//               onChange={(e) => setNewRoomName(e.target.value)}
//               placeholder="Room name"
//               className="px-3 py-1 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-200"
//             />
//             <button
//               onClick={createNewRoom}
//               className="px-3 py-1 text-sm bg-green-500 text-white rounded-md"
//             >
//               Add
//             </button>
//             <button
//               onClick={() => setShowNewRoomInput(false)}
//               className="px-3 py-1 text-sm bg-gray-300 text-gray-800 dark:bg-gray-700 dark:text-gray-300 rounded-md"
//             >
//               Cancel
//             </button>
//           </div>
//         ) : (
//           <button
//             onClick={() => setShowNewRoomInput(true)}
//             className="px-3 py-1 mb-2 rounded-md text-sm bg-gray-200 text-gray-800 dark:bg-gray-700 dark:text-gray-300"
//           >
//             + New Room
//           </button>
//         )}
//       </div>

//       <div className="flex-1 overflow-y-auto mb-4 p-3 flex flex-col scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-700">
//         {messages.map((msg) => (
//           <div
//             key={msg.id}
//             className={`flex ${
//               msg.uid === auth.currentUser?.uid
//                 ? "justify-end"
//                 : "justify-start"
//             } my-2`}
//           >
//             <div
//               className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
//                 msg.uid === auth.currentUser?.uid
//                   ? "bg-blue-500 text-white rounded-br-none dark:bg-blue-600"
//                   : "bg-gray-200 text-gray-800 rounded-bl-none dark:bg-gray-700 dark:text-gray-200"
//               }`}
//             >
//               <div
//                 className={`text-xs mb-1 font-medium ${
//                   msg.uid === auth.currentUser?.uid
//                     ? "text-blue-100"
//                     : "text-gray-500 dark:text-gray-400"
//                 }`}
//               >
//                 {msg.displayName} {msg.uid === DUMMY_USER_ID && "(Test User)"}
//               </div>
//               <div className="break-words">{msg.text}</div>
//             </div>
//           </div>
//         ))}
//         <div ref={messagesEndRef} />
//       </div>

//       <form
//         onSubmit={sendMessage}
//         className="flex space-x-2 border-t border-gray-200 dark:border-gray-700 pt-4"
//       >
//         <input
//           value={newMessage}
//           onChange={(e) => setNewMessage(e.target.value)}
//           placeholder="Type a message"
//           className="flex-1 px-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-200 dark:placeholder-gray-400"
//         />
//         <button
//           type="submit"
//           className="bg-blue-500 text-white px-4 py-2 rounded-full hover:bg-blue-600 transition dark:bg-blue-600 dark:hover:bg-blue-700"
//         >
//           Send
//         </button>
//       </form>
//     </div>
//   )
// }
</file>

<file path="src/components/SignIn.tsx">
import { useState } from 'react';
import { signInWithEmailAndPassword, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';
import { auth } from '../firebase/config';

interface SignInProps {
  darkMode: boolean;
  onSwitch: () => void;
}

export const SignIn = ({ darkMode, onSwitch }: SignInProps) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');

  const handleEmailSignIn = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    
    try {
      await signInWithEmailAndPassword(auth, email, password);
    } catch (err: any) {
      setError(err.message);
    }
  };

  const handleGoogleSignIn = async () => {
    setError('');
    const provider = new GoogleAuthProvider();
    
    try {
      await signInWithPopup(auth, provider);
    } catch (err: any) {
      setError(err.message);
    }
  };

  return (
    <>
      <h2 className={`text-2xl font-bold text-center mb-6 ${darkMode ? 'text-white' : 'text-gray-800'}`}>
        Welcome Back
      </h2>
      
      {error && (
        <div className={`mb-4 p-3 rounded ${darkMode ? 'bg-red-900 border-red-700 text-red-200' : 'bg-red-100 border border-red-400 text-red-700'}`}>
          {error}
        </div>
      )}
      
      <form onSubmit={handleEmailSignIn} className="space-y-4">
        <div>
          <label className={`block text-sm font-medium mb-1 ${darkMode ? 'text-gray-300' : 'text-gray-700'}`} htmlFor="email">
            Email
          </label>
          <input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            className={`w-full px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300 text-gray-900'}`}
          />
        </div>
        
        <div>
          <label className={`block text-sm font-medium mb-1 ${darkMode ? 'text-gray-300' : 'text-gray-700'}`} htmlFor="password">
            Password
          </label>
          <input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            className={`w-full px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300 text-gray-900'}`}
          />
        </div>
        
        <button 
          type="submit"
          className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors"
        >
          Login
        </button>
      </form>
      
      <div className={`my-4 flex items-center ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
        <div className="flex-grow h-px bg-current"></div>
        <span className="px-2 text-sm">or</span>
        <div className="flex-grow h-px bg-current"></div>
      </div>
      
      <button 
        onClick={handleGoogleSignIn}
        className={`w-full flex items-center justify-center py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors ${darkMode ? 'bg-gray-700 text-white hover:bg-gray-600' : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-100'}`}
      >
        <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
          <path
            fill="currentColor"
            d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
          />
          <path
            fill="currentColor"
            d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
          />
          <path
            fill="currentColor"
            d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
          />
          <path
            fill="currentColor"
            d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
          />
          <path fill="none" d="M1 1h22v22H1z" />
        </svg>
        Sign in with Google
      </button>
      
      <p className={`mt-4 text-center text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
        Don't have an account?
        <button 
          onClick={onSwitch}
          className={`ml-1 font-medium focus:outline-none ${darkMode ? 'text-blue-400 hover:text-blue-300' : 'text-blue-600 hover:text-blue-800'}`}
        >
          Register
        </button>
      </p>
    </>
  );
};
</file>

</files>
